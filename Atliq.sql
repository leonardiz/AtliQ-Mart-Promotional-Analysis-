
-- Create Database
create database atliq_mart;

-- Use Database
use atliq_mart;

-- Create Tables
-- Imported the tables from excel: dim_campaigns, dim_products, dim_stores and fact_events

select * from dim_campaigns;

select * from dim_products;

select * from dim_stores;

select * from fact_events;


-- Answering the Business Requests. 

-- 1. Provide a list of products with a base price greater than 500 and are featured in the promo type 'BOGOF' (Buy One Get One Free)
-- Extract product_code, product_name and promo_type

select fact_events.product_code,
		dim_products.product_name,
	    fact_events.promo_type
from fact_events
	inner join dim_products
		on fact_events.product_code = dim_products.product_code
where base_price > 500 and promo_type = 'BOGOF'
group by fact_events.product_code, dim_products.product_name
order by dim_products.product_name;

-- 2. Generate a report that provides an overview of the number of stores in each city. 
-- Extract city and store_count

select dim_stores.city, 
		count(dim_stores.store_id) as store_count
from dim_stores
group by dim_stores.city
order by store_count desc;	

-- 3. Generate report that displays each campaign along with total revenue generated before and after the campaign. 
-- Extract campaign_name, total revenue generated before and after promotion

select  campaign_name,
		total_revenue_before_promotion,
        total_revenue_after_promotion
from (
	select dim_campaigns.campaign_name,
    sum(fact_events.base_price * fact_events.`quantity_sold(before_promo)`) as total_revenue_before_promotion,
    sum(fact_events.base_price * fact_events.`quantity_sold(after_promo)`) as total_revenue_after_promotion
	from dim_campaigns
	inner join fact_events
	on dim_campaigns.campaign_id = fact_events.campaign_id
	group by dim_campaigns.campaign_name
    ) as subquery
order by total_revenue_after_promotion desc;

-- 4. Produce a report that calculate the incremental sold quantity (ISU%) for each category during the Diwali campaign.
-- Extract category, ISU(%) and rank specifically for DIWALI campaign

select 
    category,
    ISU_percentage,
    rank() over (order by ISU_percentage desc) as rank_order
from (
    select
        dim_products.category,
        round(
            sum(
                case 
                    when dim_campaigns.campaign_id = 'CAMP_DIW_01'
                    then fact_events.`quantity_sold(after_promo)` - fact_events.`quantity_sold(before_promo)`
                    else 0
                end
            ) / nullif(sum(fact_events.`quantity_sold(before_promo)`), 0) * 100, 2
        ) as ISU_percentage
    from dim_products
		inner join fact_events 
			on dim_products.product_code = fact_events.product_code
		inner join dim_campaigns 
			on dim_campaigns.campaign_id = fact_events.campaign_id
		group by dim_products.category
	) as subquery
	order by ISU_percentage desc;


-- 5. Create a report featuring the top 5 products, ranked by incremental revenue percentage (IR%) across all campaigns. 
-- Extract Top 5 products, category, total revenue before and after promotion and the (IR%) 

select 
    product_name,
    category,
    total_revenue_before_promotion,
    total_revenue_after_promotion,
    IR_percentage
from (
    select 
        dim_products.product_name,
        dim_products.category,
        sum(fact_events.base_price * fact_events.`quantity_sold(before_promo)`) as total_revenue_before_promotion,
        sum(fact_events.base_price * fact_events.`quantity_sold(after_promo)`) as total_revenue_after_promotion,
        round((sum(fact_events.base_price * fact_events.`quantity_sold(after_promo)`) - 
        sum(fact_events.base_price * fact_events.`quantity_sold(before_promo)`)) / 
        sum(fact_events.base_price * fact_events.`quantity_sold(before_promo)`) * 100, 2) as IR_percentage
    from 
        dim_products
    inner join fact_events 
        on dim_products.product_code = fact_events.product_code
    group by dim_products.product_name, dim_products.category
) as subquery
order by IR_percentage desc
    limit 5;


-- 6. What is the total revenue generated by all Atliq stores.
-- Calculate the total revenue generated by Atliq Mart.

select 
	sum(fact_events.base_price * fact_events.`quantity_sold(after_promo)`) + 
		sum(fact_events.base_price * fact_events.`quantity_sold(before_promo)`) as total_revenue
from fact_events;

-- 7. Whats is the total revenue generated by all Atliq stores before and after promotion and the percentage increase/decrease?
-- Calculate the total revenue before and after promo and the percentage increase in revenue after promo.
  
  select 
  sum(total_revenue_b4_promo) as total_revenue_b4_promo,
  sum(total_revenue_after_promo) as total_revenue_after_promo,
  sum(total_revenue_after_promo / total_revenue_b4_promo * 100) as total_revenue_percentage_increase
from (
  select 
    sum(fact_events.base_price * fact_events.`quantity_sold(before_promo)`) as total_revenue_b4_promo,
    sum(fact_events.base_price * fact_events.`quantity_sold(after_promo)`) as total_revenue_after_promo
  from fact_events
) as subquery;


-- 8. How many stores does Atliq Mart own?
-- Calculate the number of stores

select count(store_id) as number_of_stores
from dim_stores;


/* 9. What is the Total quantity sold by Atliq Mart (before and after promo)?
Extract the Total quantity sold, Total quantity sold before and after promo and the percentage increase
*/

select 
	Total_Quantity_Sold,
    Total_Quantity_Sold_Before_Promo,
    Total_Quantity_Sold_After_Promo
    Percentage_Increase
from (
	select
		sum(`quantity_sold(before_promo)` + `quantity_sold(after_promo)`) as Total_Quantity_Sold,
		sum(`quantity_sold(before_promo)`) as Total_Quantity_Sold_Before_Promo,
        sum(`quantity_sold(after_promo)`) as Total_Quantity_Sold_After_Promo,
        round(sum(`quantity_sold(after_promo)` - `quantity_sold(before_promo)`) /
        sum(`quantity_sold(before_promo)`) * 100, 2) as Percentage_Increase
from fact_events
) as subquery;

select 
    Total_Quantity_Sold,
    Total_Quantity_Sold_Before_Promo,
    Total_Quantity_Sold_After_Promo,
    Percentage_Increase
from (
    select
        sum(`quantity_sold(before_promo)` + `quantity_sold(after_promo)`) as Total_Quantity_Sold,
        sum(`quantity_sold(before_promo)`) as Total_Quantity_Sold_Before_Promo,
        sum(`quantity_sold(after_promo)`) as Total_Quantity_Sold_After_Promo,
        round(sum(`quantity_sold(after_promo)` - `quantity_sold(before_promo)`) /
              sum(`quantity_sold(before_promo)`) * 100, 2) as Percentage_Increase
    from fact_events
) as subquery;

--  Store Performance Analysis-------

-- 1. Which are the top 10 stores in terms of incremental revenue (IR) generated from promotions
-- Calculate the incremental revenue (IR) generated by each store TOP 10 only.

select 
		stores,
        incremental_revenue
from (
	select 
		dim_stores.store_id as stores,
		sum(fact_events.base_price * fact_events.`quantity_sold(after_promo)`) - 
		sum(fact_events.base_price * fact_events.`quantity_sold(before_promo)`) as incremental_revenue
	from dim_stores
    inner join fact_events
    on dim_stores.store_id = fact_events.store_id
    group by dim_stores.store_id
    ) as subquery
order by incremental_revenue desc
limit 10;

-- 2. Which are the bottom 10 stores when it comes to incremental sold unit (ISU) during the promotional period?
-- Calculate the incremental sold unit (ISU) generated by each store, BOTTOM 10 only.

select 
	stores,
    ISU
from (
	select 
		dim_stores.store_id as stores,
        SUM(fact_events.`quantity_sold(after_promo)`) - 
        SUM(fact_events.`quantity_sold(before_promo)`) as ISU
	from dim_stores
    inner join fact_events
    on dim_stores.store_id = fact_events.store_id
    group by dim_stores.store_id
    ) as subquery
order by ISU asc
limit 10;

-- 3. How does performance by stores vary by city? Are there common characteristics among top-performing stores 
----- that could be leveraged across other stores?

-- 3a. What are the 10 stores that generated the highest revenue during the Diwali campaign, and in which cities are they situated?
-- Extract the stores, city and revenue generated during DIWALI campaign TOP 10 only.

select 
    store,
    city,
    total_revenue_Diwali
from (
    select 
        dim_stores.store_id as store,
        dim_stores.city,
        sum(
            case when dim_campaigns.campaign_id = 'CAMP_DIW_01' 
            then fact_events.base_price * fact_events.`quantity_sold(after_promo)`
                 + fact_events.base_price * fact_events.`quantity_sold(before_promo)` end
        ) as total_revenue_Diwali
    from 
        dim_stores
    inner join 
        fact_events on dim_stores.store_id = fact_events.store_id
    inner join 
        dim_campaigns on fact_events.campaign_id = dim_campaigns.campaign_id
    group by 
        dim_stores.store_id,
        dim_stores.city
) as subquery
order by 
  total_revenue_Diwali desc
  limit 10;

-- 3b What are the 10 stores that generated the highest revenue during the Sankranti campaign, and in which cities are they situated?
-- Extract the stores, city and revenue generated during SANKRANTI campaign TOP 10 only.

select 
    store,
    city,
    total_revenue_Sankranti
from (
    select 
        distinct dim_stores.store_id as store,
        dim_stores.city,
        sum(
            case when dim_campaigns.campaign_id = 'CAMP_SAN_01' 
            then fact_events.base_price * fact_events.`quantity_sold(after_promo)`
                 + fact_events.base_price * fact_events.`quantity_sold(before_promo)` end
        ) as total_revenue_Sankranti
    from 
        dim_stores
    inner join 
        fact_events on dim_stores.store_id = fact_events.store_id
    inner join 
        dim_campaigns on fact_events.campaign_id = dim_campaigns.campaign_id
    group by 
        dim_stores.store_id,
        dim_stores.city
) as subquery
order by 
    total_revenue_Sankranti desc
limit 10;

-- Promotion Type Analysis

-- 1. What are the top 2 promotion types that resulted in the highest incremental revenue?
-- Extract the top 2 promo type and incremental revenue.

	select
		fact_events.promo_type,
        sum(fact_events.base_price * fact_events.`quantity_sold(after_promo)`) - 
		sum(fact_events.base_price * fact_events.`quantity_sold(before_promo)`) as  incremental_revenue
	from fact_events
    group by fact_events.promo_type
order by incremental_revenue desc
	limit 2;
	
-- 2. What are the bottom 2 promotion type in terms of their impact on incremental sold unit (ISU). 
-- Extract the bottom 2 promo type and incremental sold unit (ISU).
	
    select 
		fact_events.promo_type,
        sum(fact_events.`quantity_sold(after_promo)`) - 
        sum(fact_events.`quantity_sold(before_promo)`) as ISU
	from fact_events
    group by fact_events.promo_type
    order by ISU asc
limit 2;

-- 3. Is there a significanct difference in performance of discount-based promotions versus BOGOF (Buy One Get One Free) 
-- or cash-back promotions? 

-- Extract the promo type and incremental revenue percentage.

select
	    fact_events.promo_type,
		round((sum(fact_events.base_price * fact_events.`quantity_sold(after_promo)`) - 
        sum(fact_events.base_price * fact_events.`quantity_sold(before_promo)`)) / 
        sum(fact_events.base_price * fact_events.`quantity_sold(before_promo)`) * 100, 2) as IR_percentage
from fact_events
group by fact_events.promo_type
order by IR_percentage desc;


-- 4. Which promotions strike the best balance between incremental sold units (ISU) and maintaining healthy margins?
-- Extract the promo type, incremental sold quantity and incremental revenue percentage.

select
	fact_events.promo_type,
		sum(fact_events.`quantity_sold(after_promo)`) - 
        sum(fact_events.`quantity_sold(before_promo)`) as ISU,
        round((sum(fact_events.base_price * fact_events.`quantity_sold(after_promo)`) - 
        sum(fact_events.base_price * fact_events.`quantity_sold(before_promo)`)) / 
        sum(fact_events.base_price * fact_events.`quantity_sold(before_promo)`) * 100, 2) as IR_Percentage
from fact_events
group by fact_events.promo_type
order by IR_Percentage desc; 

-- PRODUCT AND CATEGORY ANALYSIS

/* 
1. Produce a report that calculate the incremental revenue percentage (IR%) for each category
----- during the Diwali and Sankranti campaign.
*/
 
 select 
    category,
    IR_Percent_Diwali,
    IR_Percent_Sankranti
from (
    select 
        dim_products.category,
        round(
            (
                sum(
                    case 
                        when dim_campaigns.campaign_id = 'CAMP_DIW_01' 
                        then fact_events.base_price * fact_events.`quantity_sold(after_promo)` - 
                            fact_events.base_price * fact_events.`quantity_sold(before_promo)`
                        else 0 
                    end
                )
            ) 
            / nullif(sum(fact_events.base_price * fact_events.`quantity_sold(before_promo)`), 0) * 100, 2
        ) as IR_Percent_Diwali,
        round(
            (
                sum(
                    case 
                        when dim_campaigns.campaign_id = 'CAMP_SAN_01' 
                        then fact_events.base_price * fact_events.`quantity_sold(after_promo)` - 
                            fact_events.base_price * fact_events.`quantity_sold(before_promo)`
                        else 0 
                    end
                )
            ) 
            / nullif(sum(fact_events.base_price * fact_events.`quantity_sold(before_promo)`), 0) * 100, 2
        ) as IR_Percent_Sankranti
    from dim_products
		inner join fact_events 
			on dim_products.product_code = fact_events.product_code
		inner join dim_campaigns 
			on dim_campaigns.campaign_id = fact_events.campaign_id
    group by dim_products.category
) as subquery
order by IR_Percent_Sankranti desc;

/* 2. Which product categories saw the most significant lift in sales from the promotions?
Extract the category and total revenue after promo.
*/

select dim_products.category,
	   sum(fact_events.base_price * fact_events.`quantity_sold(after_promo)`) as revenue_after_promo
from dim_products
	inner join fact_events
		on dim_products.product_code = fact_events.product_code
	group by dim_products.category
    order by revenue_after_promo desc;
    
    /* 3. Are there specific products that respond exceptionally well or poorly to promotions?
Extract the products and total revenue after promo.
*/

    select
		dim_products.product_name,
		sum(fact_events.base_price * fact_events.`quantity_sold(after_promo)`) as revenue_after_promo
	from dim_products
		inner join fact_events
			on dim_products.product_code = fact_events.product_code
		group by dim_products.product_name
        order by revenue_after_promo desc;
	
	/* 4. What is the correlation between product category and promotion type effectiveness?
  Extract the category, ISU(%) and IR(%)
  */
  
    select
		category,
        ISU_Percentage,
        IR_percentage
	from (
		select
			dim_products.category,
				round(
					(sum(fact_events.`quantity_sold(after_promo)`) - 
					sum(fact_events.`quantity_sold(before_promo)`)) / 
					sum(fact_events.`quantity_sold(before_promo)`) * 100, 2) as ISU_Percentage,
        
			round((sum(fact_events.base_price * fact_events.`quantity_sold(after_promo)`) - 
			sum(fact_events.base_price * fact_events.`quantity_sold(before_promo)`)) / 
			sum(fact_events.base_price * fact_events.`quantity_sold(before_promo)`) * 100, 2) as IR_percentage
	from dim_products
	inner join fact_events
		on dim_products.product_code = fact_events.product_code
	group by dim_products.category
    ) as subquery
    order by IR_percentage desc; 